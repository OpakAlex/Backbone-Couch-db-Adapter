// Generated by CoffeeScript 1.3.3

/*
Create simple adapter for backbone js
run this code after Couch.init function!!!

example:
  class CounchInit
    constructor: (@host, @user, pass) ->
      @user = window.gon.current_user unless @user #{login: 'login', name: 'I am'} #if use gon
      Couch.init ->
        server = new Couch.Server('http://localhost:5984') #or you server
        window.db = new Couch.Database(server, 'db_name');
        new BackBoneCouchDbAdapter()
        PlayerApp.appView = new PlayerApp.AppView collection: new PlayerApp.PlayListCollection

in bacbone collections use option view
example:
class ExampleApp.ExampleList extends Backbone.Collection

# Reference to this collection's model.
  view: 'your view'
  model: ExampleApp.Example
  url: '#'

  done: ->

  remaining: ->
$->
  new CounchInit()

for couch.js use this(step by step):
  https://github.com/benvinegar/couchdb-xd
*/


(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Backbone.Model = (function(_super) {

    __extends(Model, _super);

    function Model() {
      return Model.__super__.constructor.apply(this, arguments);
    }

    Model.prototype.idAttribute = "_id";

    Model.prototype.clone = function() {
      var new_model;
      new_model = new this.constructor(this);
      if (new_model.attributes._id) {
        delete new_model.attributes._id;
      }
      if (new_model.attributes._rev) {
        delete new_model.attributes._rev;
      }
      return new_model;
    };

    return Model;

  })(Backbone.Model);

  this.CouchQueryAdapter = (function() {

    function CouchQueryAdapter(db) {
      var self;
      this.db = db;
      self = this;
    }

    CouchQueryAdapter.prototype.query = function(model, opts) {
      var _opts;
      return _opts = this.make_options(model.constructor.prototype);
    };

    CouchQueryAdapter.prototype.query_model = function(model, opts) {
      var _opts;
      return _opts = this.make_options(model.constructor.prototype);
    };

    CouchQueryAdapter.prototype.get_model = function(model, opts) {
      var _this = this;
      return this.db.get(model.id, function(resp) {
        opts.success(resp);
        return opts.complete();
      });
    };

    CouchQueryAdapter.prototype.update_model = function(model, opts) {
      var vals;
      this.before_save(model);
      vals = model.toJSON();
      return this.db.put(model.id, vals, function(doc) {
        opts.success({
          _id: doc.id,
          _rev: doc.rev
        });
        return opts.complete();
      });
    };

    CouchQueryAdapter.prototype.create_model = function(model, opts) {
      var vals;
      this.before_save(model);
      vals = model.toJSON();
      return this.db.post(vals, function(doc) {
        opts.success({
          _id: doc.id,
          _rev: doc.rev
        });
        return opts.complete();
      });
    };

    CouchQueryAdapter.prototype.delete_model = function(model, opts) {
      if (model.rev) {
        return this.db.destroy(model.id, {
          rev: model.rev
        }, function(doc) {
          return opts.success();
        });
      }
    };

    CouchQueryAdapter.prototype.view = function(model, opts) {
      var params, url, _opts,
        _this = this;
      _opts = this.make_options(model.constructor.prototype);
      _opts = this.user_filter(_opts, model.constructor.prototype.filters);
      url = this.get_view_url(model.constructor.prototype.view, model.constructor.prototype.view_url);
      url += "?" + ($.param(_opts));
      params = {
        callback: (function(res) {
          if (model.constructor.prototype.read_collback) {
            return model.constructor.prototype.read_collback(res, opts);
          } else {
            return _this.view_collback(res, opts);
          }
        })
      };
      return this.db.request(url, params);
    };

    CouchQueryAdapter.prototype.view_collback = function(res, opts) {
      var doc, _i, _len, _ref, _temp;
      _temp = [];
      _ref = res.rows;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        doc = _ref[_i];
        if (doc.value) {
          _temp.push(doc.value);
        } else {
          _temp.push(doc.doc);
        }
      }
      opts.success(_temp);
      return opts.complete();
    };

    CouchQueryAdapter.prototype.get_view_url = function(view, url) {
      if (!url) {
        url = "_design/" + this.db.name + "/_view/" + view;
      }
      return url;
    };

    CouchQueryAdapter.prototype.make_options = function(opts) {
      var option, _i, _len, _opts, _ref;
      _opts = {};
      _ref = this.options();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        if (opts[option]) {
          _opts[option] = opts[option];
        }
      }
      return _opts;
    };

    CouchQueryAdapter.prototype.user_filter = function(_opts, opts) {
      var k, v;
      if (opts) {
        for (k in opts) {
          v = opts[k];
          if (v) {
            _opts[k] = v;
          }
        }
      }
      return _opts;
    };

    CouchQueryAdapter.prototype.before_save = function(model) {
      if (model.before_save) {
        return model.before_save();
      }
    };

    CouchQueryAdapter.prototype.options = function() {
      return ["key", "keys", "startkey", "startkey_docid", "endkey", "endkey_docid", "limit", "stale", "descending", "skip", "group", "group_level", "include_docs", "inclusive_end", "update_seq"];
    };

    return CouchQueryAdapter;

  })();

  this.BackBoneCouchDbAdapter = (function() {

    function BackBoneCouchDbAdapter(db) {
      this.db = db;
      this.adapter = new CouchQueryAdapter(this.db);
      this;

    }

    BackBoneCouchDbAdapter.prototype.read = function(model, opts) {
      if (model.models) {
        return this.read_collection(model, opts);
      } else {
        return this.read_model(model, opts);
      }
    };

    BackBoneCouchDbAdapter.prototype.read_model = function(model, opts) {
      return this.adapter.get_model(model, opts);
    };

    BackBoneCouchDbAdapter.prototype.read_collection = function(model, opts) {
      return this.adapter.view(model, opts);
    };

    BackBoneCouchDbAdapter.prototype.create = function(model, opts) {
      return this.adapter.create_model(model, opts);
    };

    BackBoneCouchDbAdapter.prototype.update = function(model, opts) {
      return this.adapter.update_model(model, opts);
    };

    BackBoneCouchDbAdapter.prototype.del = function(model, opts) {
      return this.adapter.delete_model(model, opts);
    };

    BackBoneCouchDbAdapter.prototype.sync = function() {
      var self;
      self = this;
      return Backbone.sync = function(method, model, opts) {
        var _ref, _ref1, _ref2;
        if ((_ref = opts.success) == null) {
          opts.success = function() {};
        }
        if ((_ref1 = opts.error) == null) {
          opts.error = function() {};
        }
        if ((_ref2 = opts.complete) == null) {
          opts.complete = function() {};
        }
        if (model.constructor.prototype.adapter) {
          self = model.constructor.prototype.adapter;
        }
        switch (method) {
          case "read":
            return self.read(model, opts);
          case "create":
            return self.create(model, opts);
          case "update":
            return self.update(model, opts);
          case "delete":
            return self.del(model, opts);
        }
      };
    };

    return BackBoneCouchDbAdapter;

  })();

}).call(this);
